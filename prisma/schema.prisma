generator dbml {
  provider            = "prisma-dbml-generator"
  output              = "./dbml"
  outputName          = "lagalebri_db.dbml"
  projectName         = "LagalebriDB"
  projectDatabaseType = "PostgreSQL"
  projectNote         = "Lagalebri - Imobili√°ria"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Property {
  id            String         @id @unique @db.Uuid
  title         String         @db.VarChar()
  description   String?        @default("") @db.Text
  price         Decimal?       @db.Decimal(18, 2)
  imageUrl      String?        @map("image_url")
  area          Decimal?       @db.Decimal(10, 2)
  address       String?
  latitude      Decimal?
  longitude     Decimal?
  createAt      DateTime?      @default(now()) @map("created_at")
  updateAt      DateTime?      @default(now()) @updatedAt @map("updated_at")
  categories    Category[]     @relation("properties_categories")
  favorites     Favorite[]
  rating        Rating[]
  images        Image[]
  views         View[]
  compartiments Compartiment[]
  interatios    Interaction[]

  @@index([title])
  @@map("properties")
}

model Compartiment {
  id         String    @id @unique @db.Uuid
  property   Property  @relation(fields: [propertyId], references: [id])
  propertyId String    @unique @db.Uuid
  name       String    @db.VarChar()
  quantity   Int
  createAt   DateTime? @default(now()) @map("created_at")
  updateAt   DateTime? @default(now()) @updatedAt @map("updated_at")

  @@index([propertyId, name])
  @@map("compartiments")
}

model Image {
  id         String   @id @unique @db.Uuid
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String   @db.Uuid
  url        String   @db.Text

  @@index([propertyId])
  @@map("images")
}

model Category {
  id          String     @id @unique @db.Uuid
  name        String     @unique @db.VarChar()
  description String?    @default("") @db.Text
  createAt    DateTime?  @default(now()) @map("created_at")
  updateAt    DateTime?  @default(now()) @updatedAt @map("updated_at")
  properties  Property[] @relation("properties_categories")

  @@index([name])
  @@map("categories")
}

model Favorite {
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String   @db.Uuid
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.Uuid

  @@unique([propertyId, userId])
  @@index([propertyId, userId])
  @@map("favorites")
}

model Rating {
  property   Property  @relation(fields: [propertyId], references: [id])
  propertyId String    @db.Uuid
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @db.Uuid
  start      Int
  createAt   DateTime? @default(now()) @map("created_at")
  updateAt   DateTime? @default(now()) @updatedAt @map("updated_at")

  @@unique([propertyId, userId])
  @@index([userId, propertyId])
  @@map("ratings")
}

model View {
  id         String    @id @unique @db.Uuid
  property   Property  @relation(fields: [propertyId], references: [id])
  propertyId String    @db.Uuid
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @db.Uuid
  createAt   DateTime? @default(now()) @map("created_at")
  updateAt   DateTime? @default(now()) @updatedAt @map("updated_at")

  @@index([propertyId, userId])
  @@map("views")
}

enum InteractionTypes {
  VIEW
  FAVORITE
  CONTACT
  RATING
}

model Interaction {
  id         String           @id @unique @db.Uuid
  property   Property         @relation(fields: [propertyId], references: [id])
  propertyId String           @db.Uuid
  user       User             @relation(fields: [userId], references: [id])
  userId     String           @db.Uuid
  type       InteractionTypes
  metadata   String           @db.Text
  createAt   DateTime?        @default(now()) @map("created_at")
  updateAt   DateTime?        @default(now()) @updatedAt @map("updated_at")

  @@index([userId, propertyId])
  @@map("interations")
}

model User {
  id              String          @id @unique @db.Uuid
  email           String?         @unique
  phone           String?         @unique @db.VarChar(9)
  createAt        DateTime?       @default(now()) @map("created_at")
  updateAt        DateTime?       @default(now()) @updatedAt @map("updated_at")
  favorites       Favorite[]
  rating          Rating[]
  views           View[]
  interatios      Interaction[]
  searchHistories SearchHistory[]
  profile         Profile?

  @@index([email, phone])
  @@map("users")
}

model Profile {
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @id @unique @db.Uuid
  name         String   @db.VarChar()
  notification Boolean  @default(true)
  createAt     DateTime @map("created_at")
  updateAt     DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@map("profiles")
}

model SearchHistory {
  id       String   @id @unique @db.Uuid
  user     User     @relation(fields: [userId], references: [id])
  userId   String   @db.Uuid
  search   String
  category String?  @default("") @db.VarChar()
  createAt DateTime @map("created_at")
  updateAt DateTime @updatedAt @map("updated_at")

  @@map("search_histories")
}
