// generator dbml {
//    provider            = "prisma-dbml-generator"
//   output              = "./dbml"
//   outputName          = "lagalebri_db.dbml"
//   projectName         = "LagalebriDB"
//   projectDatabaseType = "PostgreSQL"
//   projectNote         = "Lagalebri - Imobili√°ria"
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PropertyState {
  DRAFT
  PUBLISHED
  CANCELED
}

model Property {
  id           String        @id @unique @db.Uuid
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @map("user_id") @db.Uuid
  title        String        @db.VarChar()
  slug         String        @unique @db.VarChar()
  description  String?       @default("") @db.Text
  price        Decimal?      @db.Decimal(18, 2)
  imageUrl     String?       @map("image_url")
  area         Decimal?      @db.Decimal(10, 2)
  address      String?
  latitude     Decimal?
  longitude    Decimal?
  state        PropertyState @default(DRAFT)
  createAt     DateTime?     @default(now()) @map("created_at")
  updateAt     DateTime?     @default(now()) @updatedAt @map("updated_at")
  categories   Category[]    @relation("properties_categories")
  favorites    Favorite[]
  ratings      Rating[]
  images       Image[]
  views        View[]
  compartments Compartment[]
  interactions Interaction[]
  contacts     Contact[]     @relation("properties_contacts")

  @@index([title, slug])
  @@map("properties")
}

model Compartment {
  id         String    @id @unique @db.Uuid
  property   Property  @relation(fields: [propertyId], references: [id])
  propertyId String    @unique @map("property_id") @db.Uuid
  name       String    @db.VarChar()
  quantity   Int
  createAt   DateTime? @default(now()) @map("created_at")
  updateAt   DateTime? @default(now()) @updatedAt @map("updated_at")

  @@index([propertyId, name])
  @@map("compartments")
}

model Image {
  id         String   @id @unique @db.Uuid
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String   @map("property_id") @db.Uuid
  url        String   @db.Text

  @@index([propertyId])
  @@map("images")
}

model Category {
  id          String     @id @unique @db.Uuid
  name        String     @unique @db.VarChar()
  description String?    @default("") @db.Text
  createAt    DateTime?  @default(now()) @map("created_at")
  updateAt    DateTime?  @default(now()) @updatedAt @map("updated_at")
  properties  Property[] @relation("properties_categories")

  @@index([name])
  @@map("categories")
}

model Favorite {
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String   @map("property_id") @db.Uuid
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @map("user_id") @db.Uuid

  @@unique([propertyId, userId])
  @@index([propertyId, userId])
  @@map("favorites")
}

model Rating {
  property   Property  @relation(fields: [propertyId], references: [id])
  propertyId String    @map("property_id") @db.Uuid
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @map("user_id") @db.Uuid
  stars      Int
  createAt   DateTime? @default(now()) @map("created_at")
  updateAt   DateTime? @default(now()) @updatedAt @map("updated_at")

  @@unique([propertyId, userId])
  @@index([userId, propertyId])
  @@map("ratings")
}

model View {
  id         String    @id @unique @db.Uuid
  property   Property  @relation(fields: [propertyId], references: [id])
  propertyId String    @map("property_id") @db.Uuid
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @map("user_id") @db.Uuid
  createAt   DateTime? @default(now()) @map("created_at")
  updateAt   DateTime? @default(now()) @updatedAt @map("updated_at")

  @@index([propertyId, userId])
  @@map("views")
}

enum InteractionTypes {
  VIEW
  FAVORITE
  CONTACT
  RATING
}

model Interaction {
  id         String           @id @unique @db.Uuid
  property   Property         @relation(fields: [propertyId], references: [id])
  propertyId String           @map("property_id") @db.Uuid
  user       User             @relation(fields: [userId], references: [id])
  userId     String           @map("user_id") @db.Uuid
  type       InteractionTypes
  metadata   String           @db.Text
  createAt   DateTime?        @default(now()) @map("created_at")
  updateAt   DateTime?        @default(now()) @updatedAt @map("updated_at")

  @@index([userId, propertyId])
  @@map("interactions")
}

enum UserType {
  ADMIN
  NORMAL
}

model User {
  id              String          @id @unique @db.Uuid
  email           String?         @unique
  phone           String?         @unique @db.VarChar(9)
  type            UserType        @default(NORMAL)
  createAt        DateTime?       @default(now()) @map("created_at")
  updateAt        DateTime?       @default(now()) @updatedAt @map("updated_at")
  profile         Profile?
  favorites       Favorite[]
  ratings         Rating[]
  views           View[]
  interactions    Interaction[]
  searchHistories SearchHistory[]
  contacts        Contact[]
  properties      Property[]

  @@index([email, phone])
  @@map("users")
}

model Contact {
  id       String     @id @unique @db.Uuid
  user     User       @relation(fields: [userId], references: [id])
  userId   String     @map("user_id") @db.Uuid
  type     String     @db.VarChar(150)
  contact  String
  createAt DateTime?  @default(now()) @map("created_at")
  updateAt DateTime?  @default(now()) @updatedAt @map("updated_at")
  property Property[] @relation("properties_contacts")

  @@unique([userId, contact])
  @@index([contact])
  @@map("contacts")
}

model Profile {
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @id @unique @map("user_id") @db.Uuid
  name         String   @db.VarChar()
  notification Boolean  @default(true)
  createAt     DateTime @map("created_at")
  updateAt     DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@map("profiles")
}

model SearchHistory {
  id       String   @id @unique @db.Uuid
  user     User     @relation(fields: [userId], references: [id])
  userId   String   @map("user_id") @db.Uuid
  search   String
  category String?  @default("") @db.VarChar()
  createAt DateTime @map("created_at")
  updateAt DateTime @updatedAt @map("updated_at")

  @@map("search_histories")
}
